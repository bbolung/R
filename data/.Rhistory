a = 10
b <- 20
c = a+b
print(c)
class(c)
a = 100
name = "홍길동"
age = 20;
print(name)
print(age)
ages=c(10,20,30,40,50)
ages[5]
a = 10
a_ = 10
#벡터
a = c(1,2,3)
class(a)
b = c(1L,2L,3L)
class(b)
c = c('hello','world')
print(c[1])
class(c)
f = c(TRUE, FALSE)
f
f = c(5>2, 5<2)
f
nat = c('한국', '일본', '중국', '미국', '중국', '한국', '일본')
print(nat)
fct=as.factor(nat)
print(fct)
as.integer(fct)
a = c(1,2,3)
b = c('a','b', 'c')
c = c(1.2, 3.5, 4.6)
d = c(1,'a',1.2)
print(d[2:3])
seq(from=1, to=3, by=1)
seq(from=3, to=1, by=1)
seq(from=3, to=1, by=-1)
sequ(from=1, to=10, by=2.5)
seq(from=1, to=10, by=2.5)
seq(from=1, to=10, by=2.5)
seq(from=1, to=10, length=19)
plot(x,y,
main = '간단한 산점도', #그래프 제목
xlab = 'x값',  #x축 라벨
ylab = 'y값',  #y축 라벨
pch=16,    #점 모양(16 = 채워진 원)
col='blue' #점 색상
)
x = c(1,2,3,4,5)
y = c(2,4,1,8,7)
plot(x,y,
main = '간단한 산점도', #그래프 제목
xlab = 'x값',  #x축 라벨
ylab = 'y값',  #y축 라벨
pch=16,    #점 모양(16 = 채워진 원)
col='blue' #점 색상
)
#원소가 반복되는 벡터 생성 : rep()
rep(x,  #반복할 스칼라/벡터
times,  #x에 지정된 벡터 전체를 반복할 횟수
each,   #x에 지정된 벡터의 각 원소를 반복할 횟수
length.out  #반환되는 벡터의 길이
)
rep(x=1, times=3)
rep(x=1:3, times=3)
rep(x=1:3, each=3)
rep(x=1:3, length=10)
a = c(1:5)
print(a)
a[5] = 15
print(a)
# vector 삭제
a = a[-4]
print(a)
# vector 추가
a[4] = 4
a[5] = 5
print(a)
# vector 연산
a = c(0,2,4)
b = c(1,2,3)
c = a+b
d = a-b
c = seq(from=1, to=11, by2)
c = seq(from=1, to=11, by=2)
d = seq(from=3, to=12, by=3)
a+c
a+d
a+1
a>=1 & b<=2
#데이터프레임 원소 추가
df1$int = 11:15
#생성
#data.frame(열 이름1 = 열벡터1, 열이름2 = 열벡터2...)
num = seq(from=1, to=10, by=2)
chr <- rep(x=c('a','b'),each=3)
df1 = data.frame(num, chr)
cha = letters[1:5]
df1 = data.frame(num, cha)
class(df1)
str(df1)
print(df1)
options('max.print') #data.frame 최대 출력 개수
print(df1)
View(df1)
#데이터프레임 원소 선택
df1[1,1]
#데이터프레임 원소 추가
df1$int = 11:15
df1[1,2]
View(df1)
#데이터프레임 열 추가하기 : cbind()
cbind(df1, rep(x=TRUE, times=5))
cbind(df1, log = rep(x=TRUE, times=5))
df1 = cbind(df1, log=rep(x=TRUE, times=5))
View(df1)
cbind(df1, log2=rep(x=TRUE, times=7)) #행 개수 일치해야 함
#데이터 프레임 형 추가하기 : rbind()
df3 = data.frame(num=6, cha='f', int=16, log=TRUE)
print(df3)
rbind(df1, df3)
print(df1)
df1 = rbinc(df1, df3)
df1 = rbind(df1, df3)
View(df1)
#데이터프레임 원소 삭제
df1$num = NULL #열 삭제
View(df1)
print(df1)
#행 또는 열 삭제하기
df[-1, -1] #1행의 1열
df[-1, ]  #1행만 삭제
df[ ,-1]  #1열만 삭제
#데이터프레임 원소 변경
print(df1)
df1$cha = LETTERS[1:6]
df1$int[1] = '22'
#조건문
score <- 100
if(score>=70){
grade = "합격"
}else{
grade = "불합격"
}
print(grade)
score = seq(from=40, to=100, by=10)
score >= 70
ifelse(test = score >= 70, '합격', '불합격')
ifelse(test = score >= 70, yes='합격', no='불합격')
print(df1)
df1 = data.frame(score)
print(df1)
str(df1)
df1$grade = ifelse(test = df1$score >=70, yes = '합격', no='불합격')
print(df1)
#생성
#data.frame(열 이름1 = 열벡터1, 열이름2 = 열벡터2...)
num = seq(from=1, to=10, by=2)
chr <- rep(x=c('a','b'),each=3)
df1 = data.frame(num, chr)
df1 = data.frame(num, chr)
#생성
#data.frame(열 이름1 = 열벡터1, 열이름2 = 열벡터2...)
num = seq(from=1, to=11, by=2)
df1 = data.frame(num, chr)
#생성
#data.frame(열 이름1 = 열벡터1, 열이름2 = 열벡터2...)
num = seq(from=1, to=10, by=2)
df1 = data.frame(num, chr)
cha = letters[1:5]
df1 = data.frame(num, cha)
class(df1)
str(df1)
print(df1)
options('max.print') #data.frame 최대 출력 개수
print(df1)
View(df1)
#데이터프레임 원소 선택
df1[1,1]
df1[1,2]
#데이터프레임 원소 추가
df1$int = 11:15
View(df1)
#데이터프레임 열 추가하기 : cbind()
cbind(df1, rep(x=TRUE, times=5))
cbind(df1, log = rep(x=TRUE, times=5))
df1 = cbind(df1, log=rep(x=TRUE, times=5))
View(df1)
#데이터프레임 열 추가하기 : cbind()
cbind(df1, rep(x=TRUE, times=5))
View(df1)
df1 = cbind(df1, log=rep(x=TRUE, times=5))
View(df1)
cbind(df1, log2=rep(x=TRUE, times=7)) #행 개수 일치해야 함
#데이터 프레임 형 추가하기 : rbind()
df3 = data.frame(num=6, cha='f', int=16, log=TRUE)
print(df3)
rbind(df1, df3)
print(df1)
df1[ , -5]
rbind(df1, df3)
print(df3)
View(df1)
df1[ ,-5]
View(df1)
#데이터프레임 원소 삭제
df1$log.1 = NULL #열 삭제
View(df1)
print(df1)
#데이터프레임 원소 삭제
df1$log = NULL #열 삭제
View(df1)
print(df1)
print(df3)
rbind(df1, df3)
print(df1)
df1 = rbind(df1, df3)
View(df1)
rbind(df1, df3)
print(df1)
#데이터프레임 원소 삭제
df1$num = NULL #열 삭제
View(df1)
print(df1)
#데이터프레임 원소 변경
print(df1)
df1$cha = LETTERS[1:6]
#데이터프레임 원소 변경
print(df1)
df1$int[1] = '22'
#데이터프레임 원소 변경
print(df1)
score = seq(from=40, to=100, by=10)
score >= 70
ifelse(test = score >= 70, '합격', '불합격')
#yes와 no 없어도 되지만 직관적으로 보기 위해 입력
ifelse(test = score >= 70, yes='합격', no='불합격')
df1 = data.frame(score)
print(df1)
str(df1)
df1$grade = ifelse(test = df1$score >=70, yes = '합격', no='불합격')
print(df1)
getwd()
menu = c('짜장면', '탕수육', '깐풍기', '짬뽕', '샥스핀', '양장피')
for(item in menu)
print(item)
cat(item, '시킬까요?\n');
for(item in menu){
cat(item, '시킬까요?\n');
}
for(item in menu){
text = cat(item, '시킬까요?\n');
print(text)
}
for(item in menu){
text = paste(item, '시킬까요?\n');
print(text)
}
for(item in menu){
if(item %in% c('짜장면', '짬뽕')){
cat(item, '요리부터 주문합시다!\n', sep='?')
}else{
cat(item, '다음 메뉴는 뭔가요?\n',  sep='?')
}
}
for(item in menu){
if(item %in% c('짜장면', '짬뽕')){
next
cat(item, '요리부터 주문합시다!\n', sep='?')
}else{
cat(item, '다음 메뉴는 뭔가요?\n',  sep='?')
}
}
# repeat
i = 0
repeat{
i = i+1;
print(i)
}
# repeat : 반복, 반드시 탈출 조건 필요(무한 반복)
i = 0
count = 0
# repeat : 반복, 반드시 탈출 조건 필요(무한 반복)
i = 0
repeat{
i = i+1;
if(i > 10000) break
print(i)
}
while(TRUE){
i = i+1;
if(i > 10000) break
print(i)
}
while(TRUE){
i = i+1;
if(i > 10000) break
print(i)
}
while(TRUE){
i = i+1;
if(i > 10000) break
print(i)
}
# repeat : 반복, 반드시 탈출 조건 필요(무한 반복)
i = 0
while(TRUE){
i = i+1;
if(i > 10000) break
print(i)
}
new_sum = function(x,y){
return (x+y)
}
print(new_sum(5,4))
py = function(a,b){
return (sqrt(a^2 + b^2))
}
print(py(3,4))
# apply() -> 벡터를 넣어
getwd()
str(iris)
head(iris, n=3L)
tail(iris)
# 행렬로 변환
irisMat1 = as.matrix(iris)
head(irisMat1)
# 핼렬로 변환(행 전체, 열은 1:4)
irisMat2 = as.matrix(iris[,1:4])
head(irisMat2)
apply(X=iris[,1;4], margin=1, FUN = mean)
apply(X=iris[,1:4], margin=1, FUN = mean)
apply(X=iris[,1:4], MARGIN = 1, FUN = mean)
apply(X=iris[,1:4], MARGIN = 2, FUN = mean)
apply(X=iris[,1:4], MARGIN = 2, FUN = sum)
list.files()
getwd()
setwd(dir='D:\\Dev\Works\\R')
setwd(dir='D:/Dev/Works/R')
list.files()  #경로에 있는 파일 목록 보기
getwd()  #현재 경로
write_xlsx(x = iris, path='iris.xlsx')
library(writexl)  #import
install.packages('writexl')
library(writexl)    #import
write_xlsx(x = iris, path='iris.xlsx')
list.files()
library(readxl)
install.packages('readxl')
library(readxl)
obj = read_xlsx(path='iris.xlsx')
str(obj)
write.csv(x=iris, file='iris.csv')
list.files()
obj2 = read.csv(file='iris.csv')
str(obj2)
head(obj2)
fileName = 'APT_Price_Gangnam_2020'
price = read.csv(fileName)
getwd()  #현재 경로
list.files()  #경로에 있는 파일 목록 보기
fileName = 'APT_Price_Gangnam_2020'
price = read.csv(fileName)
fileName = 'APT_Price_Gangnam_2020.csv'
price = read.csv(fileName)
head(price)
price = read.csv(file=fileName, fileEncoding = 'utf-8')
head(price)
str(price)
